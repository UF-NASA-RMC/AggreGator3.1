// Generated by gencpp from file shared_files/Motor.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_MOTOR_H
#define SHARED_FILES_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_files
{
template <class ContainerAllocator>
struct Motor_
{
  typedef Motor_<ContainerAllocator> Type;

  Motor_()
    : Direction(0)
    , speed(0)
    , valueI(0)
    , valueII(0)  {
    }
  Motor_(const ContainerAllocator& _alloc)
    : Direction(0)
    , speed(0)
    , valueI(0)
    , valueII(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Direction_type;
  _Direction_type Direction;

   typedef uint8_t _speed_type;
  _speed_type speed;

   typedef uint8_t _valueI_type;
  _valueI_type valueI;

   typedef uint8_t _valueII_type;
  _valueII_type valueII;




  typedef boost::shared_ptr< ::shared_files::Motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::Motor_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_

typedef ::shared_files::Motor_<std::allocator<void> > Motor;

typedef boost::shared_ptr< ::shared_files::Motor > MotorPtr;
typedef boost::shared_ptr< ::shared_files::Motor const> MotorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::Motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::Motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'shared_files': ['/home/odroid/AggreGator3.1/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::Motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::Motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8411ba5af2df25be2f514d5452720500";
  }

  static const char* value(const ::shared_files::Motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8411ba5af2df25beULL;
  static const uint64_t static_value2 = 0x2f514d5452720500ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/Motor";
  }

  static const char* value(const ::shared_files::Motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Another Message to control the Robot, but has more parameters\n\
\n\
uint8 Direction\n\
uint8 speed\n\
uint8 valueI\n\
uint8 valueII\n\
";
  }

  static const char* value(const ::shared_files::Motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::Motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Direction);
      stream.next(m.speed);
      stream.next(m.valueI);
      stream.next(m.valueII);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::Motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::Motor_<ContainerAllocator>& v)
  {
    s << indent << "Direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Direction);
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
    s << indent << "valueI: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valueI);
    s << indent << "valueII: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valueII);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_MOTOR_H
